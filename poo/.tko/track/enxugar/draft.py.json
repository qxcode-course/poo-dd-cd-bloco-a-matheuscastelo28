{
    "patches": [
        {
            "label": "2025-09-23_19-46-18",
            "content": "@@ -1,1482 +0,0 @@\n-class Towel:    #this%0A    def __init__(self, color: str, size: str): # constructor%0A        self.color: str = color # atributos%0A        self.size: str = size%0A        self.wetness: int = 0%0A%0A    def dry(self, amount: int) -%3E None:%0A        self.wetness += amount%0A        if self.wetness %3E= self.getMaxWetness():%0A            print(%22toalha encharcada%22)%0A            self.wetness = self.getMaxWetness()%0A%0A    def isDry(self) -%3E bool:%0A        return self.wetness == 0%0A    %0A    def wringOut(self) -%3E None:%0A        self.wetness = 0%0A%0A    def getMaxWetness(self) -%3E int:%0A        if self.size == %22P%22:%0A            %0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0%0A%0A    def __str__(self) -%3E str: # toString%0A        return f%22Cor:%7Bself.color%7D, Tam:%7Bself.size%7D, Umidade:%7Bself.wetness%7D%22%0A%0Adef main(): #2%0A   toalha =  Towel(%22%22, %22%22) # 3 objeto manipulado%0A   while True: #4 loop infinito%0A        line: str = input() # 5 entrada da linha%0A        args: list%5Bstr%5D = line.split(%22  %22) # 6 lista de palavra%0A        if args%5B0%5D == %22end%22: # fim da execu%C3%A7%C3%A3o %0A            break %0A        elif args%5B0%5D == %22new%22: # color %0A            color = args%5B1%5D%0A            size = args%5B2%5D%0A            toalha =  Towel(color, size)%0A        elif args%5B0%5D == %22show%22:%0A            print(toalha)%0A        elif args%5B0%5D == %22dry%22:%0A            amount: int = int(args%5B1%5D)%0A            toalha.dry(amount) %0A        else: %0A           print(%22comando invalido%22)\n",
            "lines": "0"
        },
        {
            "label": "2025-09-23_19-46-48",
            "content": "@@ -579,16 +579,29 @@\n == %22P%22:%0A\n+            %0A\n         \n@@ -817,12 +817,8 @@\n  Tam\n-anho\n :%7Bse\n",
            "lines": "49"
        },
        {
            "label": "2025-09-29_16-55-05",
            "content": "@@ -1284,15 +1284,12 @@\n == %22\n-mostrar\n+show\n %22:%0A \n@@ -1342,15 +1342,11 @@\n == %22\n-enxugar\n+dry\n %22:%0A \n@@ -1419,93 +1419,8 @@\n t) %0A\n-        elif args%5B0%5D== %22seca%22:%0A            print(%22sim%22 if toalha.isDry() else %22nao%22)%0A\n     \n@@ -1452,14 +1452,8 @@\n nt(%22\n-fail: \n coma\n",
            "lines": "48"
        },
        {
            "label": "2025-09-29_17-01-35",
            "content": "@@ -1511,85 +1511,8 @@\n o%22)%0A\n-            %0A        elif args%5B0%5D == %22torcer%22:%0A            toalha.wringOut()%0A\n     \n@@ -1568,11 +1568,4 @@\n do%22)\n-%0Amain()\n",
            "lines": "50"
        },
        {
            "label": "2025-09-29_17-03-07",
            "content": "@@ -1148,13 +1148,11 @@\n == %22\n-criar\n+new\n %22: #\n",
            "lines": "54"
        },
        {
            "label": "2025-09-29_17-07-35",
            "content": "@@ -1056,41 +1056,8 @@\n vra%0A\n-        %0A        print(%22$%22+line)%0A\n     \n@@ -1509,16 +1509,29 @@\n  %22nao%22)%0A\n+            %0A\n         \n",
            "lines": "54"
        },
        {
            "label": "2025-09-29_17-09-02",
            "content": "@@ -1294,31 +1294,8 @@\n ze)%0A\n-            print(%22a%22)%0A\n     \n",
            "lines": "55"
        },
        {
            "label": "2025-09-29_17-10-28",
            "content": "@@ -1089,27 +1089,8 @@\n ne)%0A\n-        print(%22a%22)%0A\n     \n@@ -1290,16 +1290,39 @@\n , size)%0A\n+            print(%22a%22)%0A\n         \n",
            "lines": "56"
        },
        {
            "label": "2025-09-29_17-11-18",
            "content": "@@ -861,17 +861,16 @@\n : #2%0A   \n- \n toalha =\n@@ -907,17 +907,16 @@\n ipulado%0A\n- \n    while\n",
            "lines": "56"
        },
        {
            "label": "2025-09-29_17-12-10",
            "content": "@@ -1028,16 +1028,17 @@\n .split(%22\n+ \n  %22) # 6 \n@@ -1087,16 +1087,35 @@\n %22+line)%0A\n+        print(%22a%22)%0A\n         \n",
            "lines": "56"
        },
        {
            "label": "2025-09-29_17-13-12",
            "content": "@@ -805,17 +805,16 @@\n Tamanho:\n- \n %7Bself.si\n@@ -826,17 +826,16 @@\n Umidade:\n- \n %7Bself.we\n",
            "lines": "55"
        },
        {
            "label": "2025-09-29_17-13-45",
            "content": "@@ -783,17 +783,16 @@\n n f%22Cor:\n- \n %7Bself.co\n",
            "lines": "55"
        },
        {
            "label": "2025-09-29_17-13-55",
            "content": "class Towel:    #this\n    def __init__(self, color: str, size: str): # constructor\n        self.color: str = color # atributos\n        self.size: str = size\n        self.wetness: int = 0\n\n    def dry(self, amount: int) -> None:\n        self.wetness += amount\n        if self.wetness >= self.getMaxWetness():\n            print(\"toalha encharcada\")\n            self.wetness = self.getMaxWetness()\n\n    def isDry(self) -> bool:\n        return self.wetness == 0\n    \n    def wringOut(self) -> None:\n        self.wetness = 0\n\n    def getMaxWetness(self) -> int:\n        if self.size == \"P\":\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0\n\n    def __str__(self) -> str: # toString\n        return f\"Cor: {self.color}, Tamanho: {self.size}, Umidade: {self.wetness}\"\n\ndef main(): #2\n    toalha =  Towel(\"\", \"\") # 3 objeto manipulado\n    while True: #4 loop infinito\n        line: str = input() # 5 entrada da linha\n        args: list[str] = line.split(\" \") # 6 lista de palavra\n        \n        print(\"$\"+line)\n        if args[0] == \"end\": # fim da execu\u00e7\u00e3o \n            break \n        elif args[0] == \"criar\": # color \n            color = args[1]\n            size = args[2]\n            toalha =  Towel(color, size)\n        elif args[0] == \"mostrar\":\n            print(toalha)\n        elif args[0] == \"enxugar\":\n            amount: int = int(args[1])\n            toalha.dry(amount) \n        elif args[0]== \"seca\":\n            print(\"sim\" if toalha.isDry() else \"nao\")\n        elif args[0] == \"torcer\":\n            toalha.wringOut()\n        else: \n           print(\"fail: comando invalido\")\nmain()",
            "lines": "55"
        }
    ]
}